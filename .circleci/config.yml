version: 2.1

aliases:
  - &param_stack_yaml
    stack_yaml:
      type: string
      default: stack.yaml
  - &param_latest
    latest:
      type: boolean
      default: false

  - &cache_key
    v1-{{ checksum "cache-key.txt" }}

executors:
  centos7:
    parameters:
      <<: [*param_stack_yaml, *param_latest]

    docker:
      - image: centos:7
    working_directory: /root/src
    shell: /bin/bash -eux -o pipefail
    environment:
      STACK_YAML: << parameters.stack_yaml >>
      CI_LATEST: <<# parameters.latest >>1<</ parameters.latest >>
      LANG: en_US.UTF-8

orbs:
  codecov: codecov/codecov@1.0.2

  helpers:
    commands:
      setup:
        steps:
          - checkout
          - run:
              name: Install stack
              command: |
                curl -sSL https://get.haskellstack.org/ | sh
                stack --version
          - run: mkdir -p .ci

      build_stack_deps:
        parameters:
          install_linters:
            type: boolean
            default: false
          install_hpc_lcov:
            type: boolean
            default: false

        steps:
          - run:
              name: Build cache key
              command: |
                FILES=(
                  "${STACK_YAML}"
                  package.yaml
                )
                echo "${STACK_YAML}" > cache-key.txt
                cat "${FILES[@]}" >> cache-key.txt
                stack --version >> cache-key.txt
                cat cache-key.txt
          - run:
              name: Install system dependencies
              command: yum install -y ncurses-devel
          - restore_cache:
              key: *cache_key
          - run:
              name: Build external dependencies
              command: |
                STACK_ARGS=(--test --bench)

                # break up parallelism to avoid OOM
                stack build "${STACK_ARGS[@]}" haskell-src-exts

                stack build "${STACK_ARGS[@]}" --only-dependencies

                if [[ -n "${INSTALL_LINTERS}" ]]; then
                    stack build -j1 hlint fourmolu
                fi

                if [[ -n "${INSTALL_HPC_LCOV}" ]]; then
                    stack install hpc-lcov --local-bin-path /usr/local/bin
                fi
              environment:
                INSTALL_LINTERS: <<# parameters.install_linters >>1<</ parameters.install_linters >>
                INSTALL_HPC_LCOV: <<# parameters.install_hpc_lcov >>1<</ parameters.install_hpc_lcov >>

jobs:
  run_build_and_test:
    parameters:
      <<: [*param_stack_yaml, *param_latest]

    executor:
      name: centos7
      stack_yaml: << parameters.stack_yaml >>
      latest: << parameters.latest >>

    steps:
      # init
      - helpers/setup

      # install stack dependencies
      - helpers/build_stack_deps:
          install_linters: << parameters.latest >>
          install_hpc_lcov: << parameters.latest >>
      - save_cache:
          key: *cache_key
          paths:
            - ~/.stack
            - .stack-work

      # build
      - run:
          name: Build
          command: |
            STACK_ARGS=(
                --test
                --no-run-tests
                --ghc-options '-ddump-splices -ddump-to-file'
                --ddump-dir .ci/
            )
            if [[ -n "${CI_LATEST}" ]]; then
                STACK_ARGS+=(--coverage)
            fi

            stack build "${STACK_ARGS[@]}"
      - run:
          name: Check Cabal file up to date
          command: git diff --exit-code *.cabal

      # lint
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Lint
                command: |
                  set +e
                  STATUS=0
                  scripts/hlint.sh || STATUS=1
                  scripts/fourmolu.sh
                  git diff --exit-code '*.hs' || STATUS=1
                  exit "${STATUS}"

      # test
      - run:
          name: Test
          command: |
            STACK_ARGS=(
              --test
              --ta '--no-create'
            )
            if [[ -n "${CI_LATEST}" ]]; then
              STACK_ARGS+=(--coverage)
            fi

            stack build "${STACK_ARGS[@]}" --ta '-p "!/Compile-time errors/"'

            if [[ -n "${CI_LATEST}" ]]; then
              stack build "${STACK_ARGS[@]}" --ta '-p "Compile-time errors"'
            fi
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Convert coverage output
                command: hpc-lcov
            - codecov/upload:
                file: lcov.info
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Test README Quickstart
                command: |
                  TESTDIR=$(mktemp -d)
                  scripts/md_extract_code.py README.md 0 -o "${TESTDIR}/README_Quickstart.hs"
                  stack runghc "${TESTDIR}/README_Quickstart.hs" | tee "${TESTDIR}/README_Quickstart.out"
                  diff -u  "${TESTDIR}/README_Quickstart.out" test/goldens/README_Quickstart.golden

      # build haddock
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Build haddock
                command: stack haddock --no-haddock-deps
            - run:
                name: Bundle haddock docs
                command: tar czf .ci/haddock-docs.tar.gz -C "$(find .stack-work/dist -regex '.*/doc/html/[^/]*')" .

      # bundle Haskell files for deployment
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: stack sdist
                command: |
                  stack sdist
                  cp "$(find .stack-work/ -name 'aeson-schemas-*.tar.gz')" .ci/

      - store_artifacts:
          path: .ci/

  run_benchmarks:
    executor: centos7

    steps:
      - helpers/setup
      - helpers/build_stack_deps
      - run:
          name: Run benchmarks
          # Note: We need to use --fast here because CI runs out of memory when optimizing the code.
          # This means that the timings are slower than a normal `stack bench` locally, but at least
          # we have some indication of performance regression in CI this way.
          command: stack bench --fast --ba '--output=.ci/benchmark-results.html'
      - store_artifacts:
          path: .ci/

workflows:
  version: 2

  build_and_test:
    jobs:
      - run_build_and_test:
          name: test_latest
          latest: true
      - run_build_and_test:
          name: test_ghc_8.10
          stack_yaml: stack-ghc-8.10.yaml
      - run_build_and_test:
          name: test_ghc_8.8
          stack_yaml: stack-ghc-8.8.yaml
      - run_build_and_test:
          name: test_ghc_8.6
          stack_yaml: stack-ghc-8.6.yaml
      - run_build_and_test:
          name: test_ghc_8.4
          stack_yaml: stack-ghc-8.4.yaml
      - run_build_and_test:
          name: test_ghc_8.2
          stack_yaml: stack-ghc-8.2.yaml

      - run_benchmarks
